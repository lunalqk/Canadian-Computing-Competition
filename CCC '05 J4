import java.io.*;
import java.util.*;

public class Main {
    public static int[][] chart;
    public static char dir = 'r';
    public static int r = 0;
    public static int c = 0; 

    public static void main(String[] args) {
        Scanner read = new Scanner(System.in);

        int width = read.nextInt();
        int height = read.nextInt();

        chart = new int[height][width];

        int wcut = read.nextInt();
        int hcut = read.nextInt();

        int steps = read.nextInt();

        r=0;
        c=wcut;

        makeCutOut(wcut, hcut);
        
        for (int i = 0; i < steps; i++){
            if(isSurrounded() == true) {
                break;
            }

            if (canWalk() == true && isHug() == true){
                walking();
            }else{
                turining();
                i--;
            }
            //System.out.println("Step: " + i);
            //print(chart);
        }

        System.out.println(c+1);
        System.out.println(r+1);
    
        //print(chart);

    }

    public static boolean isSurrounded(){
        for (int i = r-1; i <= r+1; i++){
            for (int j = c-1; j <= c+1; j++){
                if(i == r && j == c) {
                    continue;
                }

                if(i>=0 && i < chart.length && j>=0 && j<chart[0].length){
                    if(chart[i][j] == 0) {
                        return false;
                    }
                }
            }
        }
        
        return true;
    }

    public static boolean canWalk(){
        if(dir == 'r'){
            if (c<chart[0].length-1 && chart[r][c+1] != 1){
                return true;
            }else{
                return false;
            }
        }else if(dir == 'd'){
            if (r<chart.length-1 && chart[r+1][c] != 1){
                return true;
            }else{
                return false;
            }
        }else if (dir == 'l'){
            if (c>0 && chart[r][c-1] != 1){
                return true;
            }else{
                return false;
            }
        }else{
            if (r>0 && chart[r-1][c] != 1){
                return true;
            }else{
                return false;
            }
        }
    }    

    public static void walking(){
        chart[r][c]=1;
        if(dir == 'r'){
           c++;
        }else if(dir == 'd'){
            r++;
        }else if (dir == 'l'){
           c--;
        }else{
            r--;
        }
    }
    public static void turining(){
        if(dir == 'r'){
            if(isHug() == true) {
                dir = 'd';
            }else{
               dir = 'u';
            }
        }else if(dir == 'd'){
             if(isHug() == true) {
                dir = 'l';
            }else{
               dir = 'r';
            }
        }else if (dir == 'l'){
             if(isHug() == true) {
                dir = 'u';
            }else{
               dir = 'd';
            }
        }else{
             if(isHug() == true) {
                dir = 'r';
            }else{
               dir = 'l';
            }
        }
    }
    
    public static boolean isHug(){
        if(dir == 'r'){
            if(r == 0) {
                return true;
            }else{
                return chart[r-1][c] == 1;
            }
        }else if(dir == 'd'){
            if (c == chart[0].length-1){
                return true;
            }else{
                return chart[r][c+1] == 1;
            }
        }else if (dir == 'l'){
            if (r == chart.length-1){
                return true;
            }else{
                return chart[r+1][c] == 1;
            }
        }else{
            if (c == 0){
                return true;
            }else{
                return chart[r][c-1] == 1; 
            }
        }
    }

    public static void makeCutOut (int w, int h){
        int rows = chart.length;
        int cols = chart[0].length;

        for (int i = 0; i < h; i++){
            for (int j = 0; j < w; j++){
                chart[i][j] = 1;
            }
        }

        for (int i = 0; i < h; i++){
            for (int j = cols - w; j < cols; j++){
                chart[i][j] = 1;
            }
        }

        for (int i = rows - h; i < rows; i++){
            for (int j = cols - w; j < cols; j++){
                chart[i][j] = 1;
            }
        }

        for (int i = rows - h; i < rows; i++){
            for (int j = 0; j < w; j++){
                chart[i][j] = 1;
            }
        }
    }

    public static void print (int [][] v){
        for (int i = 0; i < v.length; i++){
            for (int j = 0; j < v[0].length; j++){
                System.out.print(v[i][j] + " ");
            }
            System.out.println();
        }
    }

}
